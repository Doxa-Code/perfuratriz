
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.7.0
 * Query Engine version: 3cff47a7f5d65c3ea74883f1d736e41d68ce91ed
 */
Prisma.prismaVersion = {
  client: "6.7.0",
  engine: "3cff47a7f5d65c3ea74883f1d736e41d68ce91ed"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.NCMScalarFieldEnum = {
  ncmId: 'ncmId',
  id: 'id',
  code: 'code',
  tax: 'tax',
  icms: 'icms',
  pis: 'pis',
  cofins: 'cofins',
  ipi: 'ipi',
  event: 'event',
  enable: 'enable',
  registeredAt: 'registeredAt'
};

exports.Prisma.ProductScalarFieldEnum = {
  productId: 'productId',
  id: 'id',
  name: 'name',
  tid: 'tid',
  description: 'description',
  weight: 'weight',
  length: 'length',
  height: 'height',
  width: 'width',
  ncmId: 'ncmId',
  event: 'event',
  enable: 'enable',
  registeredAt: 'registeredAt'
};

exports.Prisma.InvoiceScalarFieldEnum = {
  invoiceId: 'invoiceId',
  id: 'id',
  registration: 'registration',
  createdAt: 'createdAt',
  quote: 'quote',
  event: 'event',
  enable: 'enable',
  registeredAt: 'registeredAt'
};

exports.Prisma.InvoiceProductScalarFieldEnum = {
  invoiceProductId: 'invoiceProductId',
  id: 'id',
  productId: 'productId',
  invoiceId: 'invoiceId',
  amount: 'amount',
  quantity: 'quantity',
  event: 'event',
  enable: 'enable',
  registeredAt: 'registeredAt'
};

exports.Prisma.ExpenseScalarFieldEnum = {
  id: 'id',
  name: 'name',
  useICMSBase: 'useICMSBase',
  useCustomsBase: 'useCustomsBase',
  allocationMethod: 'allocationMethod',
  currency: 'currency'
};

exports.Prisma.DeclarationScalarFieldEnum = {
  declarationId: 'declarationId',
  id: 'id',
  registration: 'registration',
  quote: 'quote',
  createdAt: 'createdAt',
  event: 'event',
  enable: 'enable',
  registeredAt: 'registeredAt'
};

exports.Prisma.DeclarationExpenseScalarFieldEnum = {
  declarationExpenseId: 'declarationExpenseId',
  declaration: 'declaration',
  id: 'id',
  name: 'name',
  useICMSBase: 'useICMSBase',
  useCustomsBase: 'useCustomsBase',
  allocationMethod: 'allocationMethod',
  currency: 'currency',
  amount: 'amount',
  event: 'event',
  enable: 'enable',
  registeredAt: 'registeredAt'
};

exports.Prisma.DeclarationInvoiceScalarFieldEnum = {
  declarationInvoiceId: 'declarationInvoiceId',
  declaration: 'declaration',
  id: 'id',
  registration: 'registration',
  createdAt: 'createdAt',
  quote: 'quote',
  event: 'event',
  enable: 'enable',
  registeredAt: 'registeredAt'
};

exports.Prisma.DeclarationInvoiceProductScalarFieldEnum = {
  declarationInvoiceProductId: 'declarationInvoiceProductId',
  invoice: 'invoice',
  id: 'id',
  productId: 'productId',
  name: 'name',
  tid: 'tid',
  description: 'description',
  weight: 'weight',
  length: 'length',
  height: 'height',
  width: 'width',
  amount: 'amount',
  quantity: 'quantity',
  event: 'event',
  enable: 'enable',
  registeredAt: 'registeredAt'
};

exports.Prisma.DeclarationInvoiceProductNCMScalarFieldEnum = {
  declarationInvoiceProductNCMId: 'declarationInvoiceProductNCMId',
  product: 'product',
  id: 'id',
  code: 'code',
  tax: 'tax',
  icms: 'icms',
  pis: 'pis',
  cofins: 'cofins',
  ipi: 'ipi',
  event: 'event',
  enable: 'enable',
  registeredAt: 'registeredAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};
exports.Events = exports.$Enums.Events = {
  CREATED: 'CREATED',
  UPDATED: 'UPDATED',
  DELETED: 'DELETED'
};

exports.AllocationMethod = exports.$Enums.AllocationMethod = {
  NET_WEIGHT: 'NET_WEIGHT',
  NET_VALUE: 'NET_VALUE',
  PER_UNIT: 'PER_UNIT'
};

exports.Currency = exports.$Enums.Currency = {
  USD: 'USD',
  BRL: 'BRL'
};

exports.Prisma.ModelName = {
  NCM: 'NCM',
  Product: 'Product',
  Invoice: 'Invoice',
  InvoiceProduct: 'InvoiceProduct',
  Expense: 'Expense',
  Declaration: 'Declaration',
  DeclarationExpense: 'DeclarationExpense',
  DeclarationInvoice: 'DeclarationInvoice',
  DeclarationInvoiceProduct: 'DeclarationInvoiceProduct',
  DeclarationInvoiceProductNCM: 'DeclarationInvoiceProductNCM'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
